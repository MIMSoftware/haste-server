#!/bin/bash
#
# haste-server        CentOS sysv-init script for haste-server
#
# haste is run via npm start in the /usr/local/haste-server folder
# by a dedicated 'haste' user. Adapt to suit your needs.
# config: /usr/local/haste-server/config.json
#
# chkconfig: 345 85 15
# description: An open source pastebin
# processname: haste-server
# pidfile: /var/run/haste-server/haste-server.pid

### BEGIN INIT INFO
# Provides: haste-server
# Required-Start: $local_fs $remote_fs $network $named
# Required-Stop: $local_fs $remote_fs $network
# Short-Description: start and stop haste-server
# Description: haste-server is a basic text pasting/storage service
### END INIT INFO

# Source function library.
. /etc/rc.d/init.d/functions

# Path to the apachectl script, server binary, and short-form for messages.
USER=haste
NODE=/usr/bin/node
ROOT_DIR=/usr/local/haste-server

SERVER="$ROOT_DIR/haste-server.js"
LOG_FILE="$SERVER.log"

LOCK_FILE="/var/lock/subsys/haste-server"

# The semantics of these two functions differ from the way apachectl does
# things -- attempting to start while running is a failure, and shutdown
# when not running is also a failure.  So we just do it the way init scripts
# are expected to behave here.
start() {
	if [ ! -f "$LOCK_FILE" ] ; then
	        echo -n $"Starting $service_name: "
		cd $ROOT_DIR
		runuser -s /bin/bash $USER -c "$NODE $SERVER >> $LOG_FILE 2>&1 &" && echo_success || echo_failure
		#nohup $NODE $SERVER & >> $LOG_FILE && echo_success || echo_failure
		RETVAL=$?
	        echo
	        [ $RETVAL = 0 ] && touch $LOCK_FILE
		[ $RETVAL != 0 ] && rm $LOCK_FILE
	else
		echo "$SERVER is locked. LOCK_FILE: $LOCK_FILE"
		RETVAL=1
	fi
	return $RETVAL
}

stop() {
	echo -n $"Stopping $SERVER: "
	pkill -f haste-server.js && echo_success || echo_failure
	RETVAL=$?
	echo
	[ $RETVAL = 0 ] && rm -f $LOCK_FILE
}

# See how we were called.
case "$1" in
  start)
	start
	;;
  stop)
	stop
	;;
  restart)
	stop
	start
	;;
  *)
	echo $"Usage: $service_name {start|stop|restart}"
	RETVAL=2
esac

exit $RETVAL
